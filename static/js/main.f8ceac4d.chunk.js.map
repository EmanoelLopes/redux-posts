{"version":3,"sources":["services/posts/index.js","store/posts/action-types.js","store/general/action-types.js","store/general/actions.js","store/posts/actions.js","styles/index.js","components/Icon/index.js","components/Loading/index.js","containers/Posts.js","App.js","store/general/initialState.js","store/general/reducers.js","store/posts/state.js","store/posts/reducers.js","store/index.js","serviceWorker.js","index.js"],"names":["posts","get","axios","action_types","general_action_types","setLoading","payload","type","types","isLoading","getPosts","fetchFailed","success","message","fetchPosts","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","fetchedPosts","wrap","_context","prev","next","sent","data","status","t0","Error","stop","this","_x","apply","arguments","sizes","desktop","tablet","phone","defaults","GlobalStyle","keys","reduce","acc","label","css","_templateObject","createGlobalStyle","_templateObject2","MAIN","styled","main","_templateObject3","UL","ul","_templateObject4","LI","li","_templateObject5","H1","h1","_templateObject6","H2","h2","_templateObject7","P","p","_templateObject8","I","span","_templateObject9","i","_templateObject10","Icon","props","icon","animation","size","react_default","createElement","className","concat","defaultProps","Loading","text","components_Icon","Posts","getFetchedPosts","_this$props","_this","renderPostsList","map","key","id","title","body","_this$props2","components_Loading","react","Component","connect","state","App","containers_Posts","initialState","length","undefined","action","requests","rootReducer","combineReducers","objectSpread","PostsReducers","GeneralReducers","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ROOT","document","getElementById","ReactDOM","render","es","src_App","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8ceac4d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst posts = {\n  get() {\n    return axios.get('https://jsonplaceholder.typicode.com/posts');\n  }\n};\n\nexport default posts;","export default {\n  FETCH_POSTS: 'FETCH_POSTS',\n  FETCH_SUCCESS: 'FETCH_SUCCESS',\n  FETCH_FAILED: 'FETCH_SUCCESS', \n};","export default {\n  SET_LOADING: 'SET_LOADING',\n};","import types from './action-types';\n\nconst setLoading = (payload) => {\n  return {\n    type: types.SET_LOADING,\n    isLoading: payload,\n  }\n};\n\nexport {\n  setLoading\n}","import posts from '../../services/posts';\nimport types from './action-types';\nimport { setLoading } from '../general/actions';\n\nconst getPosts = payload => {\n  return {\n    type: types.FETCH_POSTS,\n    posts: payload\n  };\n};\n\nconst fetchSuccess = payload => {\n  return {\n    type: types.FETCH_SUCCESS,\n    success: true,\n    message: payload\n  };\n};\n\nconst fetchFailed = payload => {\n  return {\n    type: types.FETCH_SUCCESS,\n    success: false,\n    message: payload\n  };\n};\n\nconst fetchPosts = () => {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await posts.get();\n      const fetchedPosts = response.data;\n      if (response.status === 200) {\n        dispatch(setLoading(false));\n        dispatch(fetchSuccess('Request Success!'));\n        dispatch(getPosts(fetchedPosts));\n      } else if (response.status >= 400) {\n        dispatch(setLoading(false));\n        dispatch(fetchFailed('Request Failed!'));\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n};\n\nexport {\n  getPosts,\n  fetchSuccess,\n  fetchFailed,\n  fetchPosts\n};","import styled, { createGlobalStyle, css } from 'styled-components';\n\n// BREAKPOINTS\nconst sizes = {\n  desktop: 1000,\n  tablet: 768,\n  phone: 576,\n};\n\nconst defaults = {\n  width: 100,\n  fontSize: 16, \n};\n\n// MEDIA QUERIES\nexport const media = Object.keys(sizes).reduce((acc, label) => {\n  acc[label] = (...args) => css`\n    @media (max-width: ${sizes[label] / 16}em) {\n      ${css(...args)}\n    }\n  `\n  return acc;\n}, {})\n\n// GLOBAL\nexport const GlobalStyle = createGlobalStyle`\n  .main-content {\n    padding: 0 2rem;\n  }\n`;\n\nexport const MAIN = styled.main`\n  max-width: ${sizes.desktop}px;\n  margin: 0 auto;\n`;\n\nexport const UL = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const LI = styled.li`\n  padding: 10px 0;\n`;\n\nexport const H1 = styled.h1`\n  font-size: calc(${defaults.fontSize}px * 2);\n  margin: 0 0 10px 0;\n`;\n\nexport const H2 = styled.h2`\n font-size: calc(${defaults.fontSize}px * 1.75);\n`;\n\nexport const P = styled.p`\n  margin: 0 0 10px 0;\n`;\n\nexport const SPAN = styled.span``;\n\nexport const I = styled.i``;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { I } from 'styles';\nimport 'boxicons';\n\nconst Icon = (props) => {\n  const {\n    icon,\n    animation,\n    size\n  } = props;\n\n  return (\n    <I className={`bx bx-${icon} bx-${animation} bx-${size}`}></I>\n  );\n};\n\nIcon.propTypes = {\n  icon: PropTypes.string,\n  animation: PropTypes.string,\n  size: PropTypes.string\n};\n\nIcon.defaultProps = {\n  icon: '',\n  animation: '',\n  size: 'md'\n};\n\nexport default Icon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { P } from 'styles';\nimport Icon from 'components/Icon';\n\nconst Loading = (props) => {\n  const { text } = props;\n\n  return (\n    <P className=\"loading\">\n      <Icon\n        icon=\"loader\"\n        animation=\"spin\"\n        size=\"sm\" />\n      { text }\n    </P>\n  );\n};\n\nLoading.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default Loading;","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from 'store/posts/actions';\nimport { UL, LI, H2, P } from 'styles';\nimport Loading from 'components/Loading';\nimport PropTypes from 'prop-types';\n\nclass Posts extends Component {\n  getFetchedPosts = () => {\n    const { dispatch, getPosts } = this.props;\n    dispatch(fetchPosts(getPosts));\n  }\n\n  componentDidMount() {\n    this.getFetchedPosts();\n  }\n\n  renderPostsList = (posts) => {\n    return (\n      <UL className=\"posts-list\">\n        {posts.map(i =>\n          <LI className=\"post-item\" key={i.id}>\n            <H2>{i.title}</H2>\n            <P>{i.body}</P>\n          </LI>\n        )}\n      </UL>\n    )\n  }\n\n  render() {\n    const { posts, isLoading } = this.props;\n\n    return (\n      (isLoading) ? \n      <Loading text=\"Loading Posts...\" /> :\n      <Fragment>\n        {this.renderPostsList(posts)}\n      </Fragment>\n    );\n  }\n};\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  isLoading: state.isLoading,\n});\n\nexport default connect(mapStateToProps)(Posts);","import React, { Component, Fragment } from 'react';\nimport Posts from 'containers/Posts';\nimport { GlobalStyle, MAIN, H1 } from 'styles';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <GlobalStyle />\n        <MAIN className=\"main-content\">\n          <H1>Posts</H1>\n          <Posts />\n        </MAIN>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\n  isLoading: false,\n};\n\nexport default initialState;","import types from './action-types';\nimport initialState from './initialState';\n\nconst isLoading = function isLoading (state = initialState.isLoading, action) {\n  switch (action.type) {\n    case types.SET_LOADING:\n      return action.isLoading;\n    default:\n      return state;\n  }\n};\n\nexport {\n  isLoading\n};","const initialState = {\n  posts: [],\n  success: false,\n  message: '' \n};\n\nexport default initialState;","import initialState from './state';\nimport types from './action-types';\n\nconst posts = function posts (state = initialState.posts, action) {\n  switch (action.type) {\n    case types.FETCH_POSTS:\n      return action.posts;\n    default:\n      return state;\n  }\n};\n\nconst requests = function requests (state = initialState, action) {\n  switch (action.type) {\n    case types.FETCH_SUCCESS:\n    case types.FETCH_FAILED:\n      return {\n        success: action.success,\n        message: action.message\n      };\n    default:\n      return state;\n  }\n};\n\nexport {\n  posts,\n  requests\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport logger from 'redux-logger';\nimport * as GeneralReducers from './general/reducers';\nimport * as PostsReducers from './posts/reducers';\n\nconst rootReducer = combineReducers({\n  ...PostsReducers,\n  ...GeneralReducers\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      logger,\n      thunk\n    )\n  )\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport './styles/reset.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst ROOT = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  ROOT\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}